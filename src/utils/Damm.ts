const CHECK_DIGIT_MAP: Record<string, number> = {
    'B': 0,
    'F': 1,
    'G': 2,
    'H': 3,
    'J': 4,
    'P': 5,
    'V': 6,
    'W': 7,
    'X': 8,
    'Z': 9
}

const DAMM_LOOKUP_TABLE = [
    [0, 3, 1, 7, 5, 9, 8, 6, 4, 2],
    [7, 0, 9, 2, 1, 5, 4, 8, 6, 3],
    [4, 2, 0, 6, 8, 7, 1, 3, 5, 9],
    [1, 7, 5, 0, 9, 8, 3, 4, 2, 6],
    [6, 1, 2, 3, 0, 4, 5, 9, 7, 8],
    [3, 6, 7, 4, 2, 0, 9, 5, 8, 1],
    [5, 8, 6, 9, 7, 2, 0, 1, 3, 4],
    [8, 9, 4, 5, 3, 6, 2, 0, 1, 7],
    [9, 4, 3, 8, 6, 1, 7, 2, 0, 5],
    [2, 5, 8, 1, 4, 3, 6, 7, 9, 0]
]

/**
 * Appends zeros at the begining of a string using a provided limit
 * @param digit 
 * @param limit 
 * @returns 
 */
export function zeroPadAdigit(digit: number, limit: number) {
    const paddingCount = limit - `${digit}`.length
    if (paddingCount <= 0) return `${digit}`
    return `${Array.from({ length: paddingCount }).map(() => 0).join('') }${digit}`
}

/**
 * Uses lookup take to generate a check digit that can be used for validation..
 * Lookup Damm algorithm on google, too lazy to post links here ;)
 * @param input 
 * @returns 
 */
export function dammCheckDigit(input: string) {
    if (!input.match(/^\d+$/)) {
        input = input.replace(/\D/g, '');
    }
    let row = 0;
    for(let i = 0; i < input.length; i++) {
        let col: any = input.charAt(i);
        row = DAMM_LOOKUP_TABLE[row][col];
    }
    return `${row}`
}

/**
 * Validates scanform linkage code using a check digit generated by damm and extracted
 * check digit from provided string
 * @param input 
 * @returns 
 */
export function validateScanFormLinkageCode(input: string) {
    const [bookNo, pageNo, rowNo, checkDigitLetter] = input.split('-')
    if (!(bookNo && pageNo && rowNo && checkDigitLetter)) return false
    const formattedPageNo = zeroPadAdigit(parseInt(pageNo), 3)
    const formattedRowNo = zeroPadAdigit(parseInt(rowNo), 2)
    const checkDigitNo = CHECK_DIGIT_MAP[checkDigitLetter.toUpperCase()]
    const rebuiltCode = `${bookNo}-${formattedPageNo}-${formattedRowNo}`
    return dammCheckDigit(rebuiltCode) === `${checkDigitNo}`
}
